// Code generated by mockery 2.7.5. DO NOT EDIT.

package runner

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "k8s.io/client-go/kubernetes"

	utils "github.com/open-integration/oi/pkg/utils"

	v1 "k8s.io/api/core/v1"
)

// mockKube is an autogenerated mock type for the kube type
type mockKube struct {
	mock.Mock
}

// BuildClient provides a mock function with given fields: _a0
func (_m *mockKube) BuildClient(_a0 utils.BuildKubeClientOptions) (*kubernetes.Clientset, error) {
	ret := _m.Called(_a0)

	var r0 *kubernetes.Clientset
	if rf, ok := ret.Get(0).(func(utils.BuildKubeClientOptions) *kubernetes.Clientset); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(utils.BuildKubeClientOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildPodDefinition provides a mock function with given fields: namespace, name, version, id, port, volume, volumeClaimName, volumeMoutnPath
func (_m *mockKube) BuildPodDefinition(namespace string, name string, version string, id string, port string, volume string, volumeClaimName string, volumeMoutnPath string) (*v1.Pod, error) {
	ret := _m.Called(namespace, name, version, id, port, volume, volumeClaimName, volumeMoutnPath)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string) *v1.Pod); ok {
		r0 = rf(namespace, name, version, id, port, volume, volumeClaimName, volumeMoutnPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string, string) error); ok {
		r1 = rf(namespace, name, version, id, port, volume, volumeClaimName, volumeMoutnPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildServiceDefinition provides a mock function with given fields: namespace, name, id, port, serviceType
func (_m *mockKube) BuildServiceDefinition(namespace string, name string, id string, port string, serviceType string) (*v1.Service, error) {
	ret := _m.Called(namespace, name, id, port, serviceType)

	var r0 *v1.Service
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *v1.Service); ok {
		r0 = rf(namespace, name, id, port, serviceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(namespace, name, id, port, serviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePod provides a mock function with given fields: client, def
func (_m *mockKube) CreatePod(client *kubernetes.Clientset, def *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(client, def)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, *v1.Pod) *v1.Pod); ok {
		r0 = rf(client, def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kubernetes.Clientset, *v1.Pod) error); ok {
		r1 = rf(client, def)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: client, def
func (_m *mockKube) CreateService(client *kubernetes.Clientset, def *v1.Service) (*v1.Service, error) {
	ret := _m.Called(client, def)

	var r0 *v1.Service
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, *v1.Service) *v1.Service); ok {
		r0 = rf(client, def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kubernetes.Clientset, *v1.Service) error); ok {
		r1 = rf(client, def)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KillPod provides a mock function with given fields: client, namespace, name
func (_m *mockKube) KillPod(client *kubernetes.Clientset, namespace string, name string) error {
	ret := _m.Called(client, namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, string, string) error); ok {
		r0 = rf(client, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KillService provides a mock function with given fields: client, namespace, name
func (_m *mockKube) KillService(client *kubernetes.Clientset, namespace string, name string) error {
	ret := _m.Called(client, namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, string, string) error); ok {
		r0 = rf(client, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForPod provides a mock function with given fields: client, pod, phase
func (_m *mockKube) WaitForPod(client *kubernetes.Clientset, pod *v1.Pod, phase string) error {
	ret := _m.Called(client, pod, phase)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, *v1.Pod, string) error); ok {
		r0 = rf(client, pod, phase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
