// Code generated by mockery 2.7.5. DO NOT EDIT.

package state

import (
	event "github.com/open-integration/oi/core/event"
	mock "github.com/stretchr/testify/mock"
)

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

// Copy provides a mock function with given fields:
func (_m *MockState) Copy() (State, error) {
	ret := _m.Called()

	var r0 State
	if rf, ok := ret.Get(0).(func() State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventBytes provides a mock function with given fields:
func (_m *MockState) EventBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Events provides a mock function with given fields:
func (_m *MockState) Events() []event.Event {
	ret := _m.Called()

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func() []event.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

// Services provides a mock function with given fields:
func (_m *MockState) Services() []ServiceState {
	ret := _m.Called()

	var r0 []ServiceState
	if rf, ok := ret.Get(0).(func() []ServiceState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ServiceState)
		}
	}

	return r0
}

// StartProcess provides a mock function with given fields:
func (_m *MockState) StartProcess() {
	_m.Called()
}

// StateBytes provides a mock function with given fields:
func (_m *MockState) StateBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tasks provides a mock function with given fields:
func (_m *MockState) Tasks() map[string]TaskState {
	ret := _m.Called()

	var r0 map[string]TaskState
	if rf, ok := ret.Get(0).(func() map[string]TaskState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]TaskState)
		}
	}

	return r0
}
