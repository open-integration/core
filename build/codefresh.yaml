version: '1.0'

mode: parallel

stages:
- prepare
- test
- push

steps:
  main_clone:
    stage: prepare
    type: git-clone
    repo: open-integration/core
    git: cf_github
    revision: ${{CF_REVISION}}

  version:
    stage: prepare
    image: codefresh/cli
    commands:
    - cf_export VERSION=$(cat VERSION)
    when: &clone
      steps:
      - name: main_clone
        on:
        - success

  module-download: &common
    stage: prepare
    image: openintegration/testing
    commands:
    - go mod download
    when: *clone

  security:
    <<: *common
    stage: test
    commands:
    - snyk auth ${{SNYK_TOKEN}}
    - snyk monitor
          
  test:
    <<: *common
    environment:
    - VCS_COMMIT_ID=${{CF_REVISION}}
    - VCS_BRANCH_NAME=${{CF_BRANCH}}
    - VCS_SLUG=open-integration/core
    - CI_BUILD_ID=${{CF_BUILD_ID}}
    - CI_BUILD_URL=${{CF_BUILD_URL}}
    commands:
    - make test
    - curl -o codecov.sh https://codecov.io/bash && chmod +x codecov.sh
    - ./codecov.sh -e VCS_COMMIT_ID,VCS_BRANCH_NAME,VCS_SLUG,CI_BUILD_ID,CI_BUILD_URL

  test-fmt:
    <<: *common
    commands:
    - make test-fmt

  spellcheck:
    <<: *common
    title: Spell Check
    commands:
      - make spellcheck

  lint:
    <<: *common
    title: Run Go Lint
    commands:
      - make lint

  code-security-scan:
    <<: *common
    title: Scan code security issues
    commands:
      - make security-check

  gocyclo:
    <<: *common
    title: Run Gocyclo
    commands:
      - make gocyclo

  git-tag:
    stage: push
    title: Push tag to git
    image: codefresh/cli
    commands:
    - git remote rm origin
    - git remote add origin https://olegsu:${{GITHUB_TOKEN}}@github.com/open-integration/core.git
    - git tag v${{VERSION}}
    - git push --tags
    when:
      branch:
        only:
        - master
      steps:
      - name: test
        on:
        - success
      - name: test-fmt
        on:
        - success
      - name: version
        on:
        - success