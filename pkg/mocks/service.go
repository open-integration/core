// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import v1 "github.com/open-integration/core/pkg/api/v1"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Call provides a mock function with given fields: _a0, req
func (_m *Service) Call(_a0 context.Context, req *v1.CallRequest) (*v1.CallResponse, error) {
	ret := _m.Called(_a0, req)

	var r0 *v1.CallResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CallRequest) *v1.CallResponse); ok {
		r0 = rf(_a0, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CallResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.CallRequest) error); ok {
		r1 = rf(_a0, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kill provides a mock function with given fields:
func (_m *Service) Kill() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *Service) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Schemas provides a mock function with given fields:
func (_m *Service) Schemas() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}
