// Code generated by mockery v1.0.0. DO NOT EDIT.

package logger

import io "io"
import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

// Crit provides a mock function with given fields: msg, ctx
func (_m *MockLogger) Crit(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: msg, ctx
func (_m *MockLogger) Debug(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, ctx
func (_m *MockLogger) Error(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// FD provides a mock function with given fields:
func (_m *MockLogger) FD() io.WriteCloser {
	ret := _m.Called()

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func() io.WriteCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg, ctx
func (_m *MockLogger) Info(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// New provides a mock function with given fields: ctx
func (_m *MockLogger) New(ctx ...interface{}) Logger {
	var _ca []interface{}
	_ca = append(_ca, ctx...)
	ret := _m.Called(_ca...)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(...interface{}) Logger); ok {
		r0 = rf(ctx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// Warn provides a mock function with given fields: msg, ctx
func (_m *MockLogger) Warn(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}
